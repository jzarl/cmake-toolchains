# SPDX-FileCopyrightText: none
#
# SPDX-License-Identifier: CC0-1.0

## Cross compilation instructions:
# apt install wine64 g++-mingw-w64
#
# cmake -DCMAKE_TOOLCHAIN_FILE=~/Projects/cmake-toolchains/mingw64.toolchain -DCMAKE_BUILD_TYPE=Release -G Ninja SOURCE_DIR
# ninja
# cpack -G NSIS64



# the name of the target operating system
SET(CMAKE_SYSTEM_NAME Windows)

# which compilers to use for C and C++
SET(CMAKE_C_COMPILER x86_64-w64-mingw32-gcc)
SET(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++)
SET(CMAKE_RC_COMPILER x86_64-w64-mingw32-windres)

# for ctest:
set(CMAKE_CROSSCOMPILING_EMULATOR wine64)

# static linking to avoid runtime dependency on mingw:
# Without this, the resulting executables would be smaller,
# but require mingw-w64 to be installed.
set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
set(CMAKE_SHARED_LINKER_FLAGS "-static-libgcc -static-libstdc++")

# here is the target environment located
SET(CMAKE_FIND_ROOT_PATH  /usr/share/mingw-w64)

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search 
# programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
